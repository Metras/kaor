//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.3053
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RPURPV18.I18N {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Locale {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Locale() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("RPURPV18.I18N.Locale", typeof(Locale).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Confirmation.
        /// </summary>
        internal static string confirmation {
            get {
                return ResourceManager.GetString("confirmation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error connecting to receiver!.
        /// </summary>
        internal static string connection_error {
            get {
                return ResourceManager.GetString("connection_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Successfull connection!.
        /// </summary>
        internal static string connection_ok {
            get {
                return ResourceManager.GetString("connection_ok", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Without signal converter.
        /// </summary>
        internal static string direct_signal_converter_name {
            get {
                return ResourceManager.GetString("direct_signal_converter_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Empty memory!.
        /// </summary>
        internal static string empty_mem {
            get {
                return ResourceManager.GetString("empty_mem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You have select invalid antenna!.
        /// </summary>
        internal static string err_invalid_antenna {
            get {
                return ResourceManager.GetString("err_invalid_antenna", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Invalid antennas manager for RF1 input is selected!.
        /// </summary>
        internal static string err_no_managerRF1 {
            get {
                return ResourceManager.GetString("err_no_managerRF1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Invalid antennas manager for RF2 input is selected!.
        /// </summary>
        internal static string err_no_managerRF2 {
            get {
                return ResourceManager.GetString("err_no_managerRF2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Selected port is already in use!.
        /// </summary>
        internal static string err_port_open {
            get {
                return ResourceManager.GetString("err_port_open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error.
        /// </summary>
        internal static string error {
            get {
                return ResourceManager.GetString("error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Injector connected.
        /// </summary>
        internal static string injector_connected {
            get {
                return ResourceManager.GetString("injector_connected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Injector overloaded by current.
        /// </summary>
        internal static string injector_current_overload {
            get {
                return ResourceManager.GetString("injector_current_overload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Injector disconnected.
        /// </summary>
        internal static string injector_disconnected {
            get {
                return ResourceManager.GetString("injector_disconnected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Injector input voltage out of bound.
        /// </summary>
        internal static string injector_input_voltage_over {
            get {
                return ResourceManager.GetString("injector_input_voltage_over", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Injector output current is overloaded.
        /// </summary>
        internal static string injector_output_current_over {
            get {
                return ResourceManager.GetString("injector_output_current_over", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Injector output error.
        /// </summary>
        internal static string injector_output_error {
            get {
                return ResourceManager.GetString("injector_output_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Injector switched on.
        /// </summary>
        internal static string injector_poweron {
            get {
                return ResourceManager.GetString("injector_poweron", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Invalid packet received.
        /// </summary>
        internal static string invalid_packet {
            get {
                return ResourceManager.GetString("invalid_packet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Trace is out of 20MHz - 18GHz range. Scanning will be performed only in that range..
        /// </summary>
        internal static string invalid_trace {
            get {
                return ResourceManager.GetString("invalid_trace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The trace band is not included in the band of the converter..
        /// </summary>
        internal static string invalid_trace_band {
            get {
                return ResourceManager.GetString("invalid_trace_band", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на CRC of packet is invalid.
        /// </summary>
        internal static string packet_crc_invalid {
            get {
                return ResourceManager.GetString("packet_crc_invalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на RPV-18 Receiver, 20MHz-18GHz.
        /// </summary>
        internal static string rpv18_descr {
            get {
                return ResourceManager.GetString("rpv18_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на RPV-18.
        /// </summary>
        internal static string rpv18_name {
            get {
                return ResourceManager.GetString("rpv18_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на CRF-1: 3-4 GHz.
        /// </summary>
        internal static string signal_converter_1_name {
            get {
                return ResourceManager.GetString("signal_converter_1_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на CRF-2: 4-6 GHz.
        /// </summary>
        internal static string signal_converter_2_name {
            get {
                return ResourceManager.GetString("signal_converter_2_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на CRF-3: 6-10 GHz.
        /// </summary>
        internal static string signal_converter_3_name {
            get {
                return ResourceManager.GetString("signal_converter_3_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на CRF-4: 10-14 GHz.
        /// </summary>
        internal static string signal_converter_4_name {
            get {
                return ResourceManager.GetString("signal_converter_4_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на CRF-5: 14-16 GHz.
        /// </summary>
        internal static string signal_converter_5_name {
            get {
                return ResourceManager.GetString("signal_converter_5_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на CRF-6: 16-18 GHz.
        /// </summary>
        internal static string signal_converter_6_name {
            get {
                return ResourceManager.GetString("signal_converter_6_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Trace points step is not equal to powermeter filter band.
        ///Points step: {0}
        ///Powermeter filter band: {1}
        ///Do you want to set trace points step equal to powermeter filter band?
        ///
        ///WARNING: Previous scan results will be lost!.
        /// </summary>
        internal static string warn_step_change {
            get {
                return ResourceManager.GetString("warn_step_change", resourceCulture);
            }
        }
    }
}
